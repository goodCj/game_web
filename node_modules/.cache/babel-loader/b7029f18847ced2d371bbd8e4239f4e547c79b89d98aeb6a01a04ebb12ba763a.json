{"ast":null,"code":"import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { useDrag } from '@use-gesture/react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { Slide } from './slide';\nimport { convertPx } from '../../utils/convert-px';\nimport { bound } from '../../utils/bound';\nconst classPrefix = `adm-image-viewer`;\nexport const Slides = forwardRef((props, ref) => {\n  const slideWidth = window.innerWidth + convertPx(16);\n  const [{\n    x\n  }, api] = useSpring(() => ({\n    x: props.defaultIndex * slideWidth,\n    config: {\n      tension: 250,\n      clamp: true\n    }\n  }));\n  const count = props.images.length;\n  function swipeTo(index) {\n    let immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var _a;\n    const i = bound(index, 0, count - 1);\n    (_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, i);\n    api.start({\n      x: i * slideWidth,\n      immediate\n    });\n  }\n  useImperativeHandle(ref, () => ({\n    swipeTo\n  }));\n  const dragLockRef = useRef(false);\n  const bind = useDrag(state => {\n    if (dragLockRef.current) return;\n    const [offsetX] = state.offset;\n    if (state.last) {\n      const minIndex = Math.floor(offsetX / slideWidth);\n      const maxIndex = minIndex + 1;\n      const velocityOffset = Math.min(state.velocity[0] * 2000, slideWidth) * state.direction[0];\n      swipeTo(bound(Math.round((offsetX + velocityOffset) / slideWidth), minIndex, maxIndex));\n    } else {\n      api.start({\n        x: offsetX,\n        immediate: true\n      });\n    }\n  }, {\n    transform: _ref => {\n      let [x, y] = _ref;\n      return [-x, y];\n    },\n    from: () => [x.get(), 0],\n    bounds: () => {\n      return {\n        left: 0,\n        right: (count - 1) * slideWidth\n      };\n    },\n    rubberband: true,\n    axis: 'x',\n    pointer: {\n      touch: true\n    }\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: `${classPrefix}-slides`\n  }, bind()), React.createElement(animated.div, {\n    className: `${classPrefix}-indicator`\n  }, x.to(v => {\n    const index = bound(Math.round(v / slideWidth), 0, count - 1);\n    return `${index + 1} / ${count}`;\n  })), React.createElement(animated.div, {\n    className: `${classPrefix}-slides-inner`,\n    style: {\n      x: x.to(x => -x)\n    }\n  }, props.images.map((image, index) => React.createElement(Slide, {\n    key: index,\n    image: image,\n    onTap: props.onTap,\n    maxZoom: props.maxZoom,\n    onZoomChange: zoom => {\n      if (zoom !== 1) {\n        const index = Math.round(x.get() / slideWidth);\n        api.start({\n          x: index * slideWidth\n        });\n      }\n    },\n    dragLockRef: dragLockRef\n  }))));\n});","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useDrag","useSpring","animated","Slide","convertPx","bound","classPrefix","Slides","props","ref","slideWidth","window","innerWidth","x","api","defaultIndex","config","tension","clamp","count","images","length","swipeTo","index","immediate","arguments","undefined","_a","i","onIndexChange","call","start","dragLockRef","bind","state","current","offsetX","offset","last","minIndex","Math","floor","maxIndex","velocityOffset","min","velocity","direction","round","transform","_ref","y","from","get","bounds","left","right","rubberband","axis","pointer","touch","createElement","Object","assign","className","div","to","v","style","map","image","key","onTap","maxZoom","onZoomChange","zoom"],"sources":["/Users/liusu/Desktop/h5_free/game/node_modules/antd-mobile/es/components/image-viewer/slides.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { useDrag } from '@use-gesture/react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { Slide } from './slide';\nimport { convertPx } from '../../utils/convert-px';\nimport { bound } from '../../utils/bound';\nconst classPrefix = `adm-image-viewer`;\nexport const Slides = forwardRef((props, ref) => {\n  const slideWidth = window.innerWidth + convertPx(16);\n  const [{\n    x\n  }, api] = useSpring(() => ({\n    x: props.defaultIndex * slideWidth,\n    config: {\n      tension: 250,\n      clamp: true\n    }\n  }));\n  const count = props.images.length;\n  function swipeTo(index, immediate = false) {\n    var _a;\n    const i = bound(index, 0, count - 1);\n    (_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, i);\n    api.start({\n      x: i * slideWidth,\n      immediate\n    });\n  }\n  useImperativeHandle(ref, () => ({\n    swipeTo\n  }));\n  const dragLockRef = useRef(false);\n  const bind = useDrag(state => {\n    if (dragLockRef.current) return;\n    const [offsetX] = state.offset;\n    if (state.last) {\n      const minIndex = Math.floor(offsetX / slideWidth);\n      const maxIndex = minIndex + 1;\n      const velocityOffset = Math.min(state.velocity[0] * 2000, slideWidth) * state.direction[0];\n      swipeTo(bound(Math.round((offsetX + velocityOffset) / slideWidth), minIndex, maxIndex));\n    } else {\n      api.start({\n        x: offsetX,\n        immediate: true\n      });\n    }\n  }, {\n    transform: ([x, y]) => [-x, y],\n    from: () => [x.get(), 0],\n    bounds: () => {\n      return {\n        left: 0,\n        right: (count - 1) * slideWidth\n      };\n    },\n    rubberband: true,\n    axis: 'x',\n    pointer: {\n      touch: true\n    }\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: `${classPrefix}-slides`\n  }, bind()), React.createElement(animated.div, {\n    className: `${classPrefix}-indicator`\n  }, x.to(v => {\n    const index = bound(Math.round(v / slideWidth), 0, count - 1);\n    return `${index + 1} / ${count}`;\n  })), React.createElement(animated.div, {\n    className: `${classPrefix}-slides-inner`,\n    style: {\n      x: x.to(x => -x)\n    }\n  }, props.images.map((image, index) => React.createElement(Slide, {\n    key: index,\n    image: image,\n    onTap: props.onTap,\n    maxZoom: props.maxZoom,\n    onZoomChange: zoom => {\n      if (zoom !== 1) {\n        const index = Math.round(x.get() / slideWidth);\n        api.start({\n          x: index * slideWidth\n        });\n      }\n    },\n    dragLockRef: dragLockRef\n  }))));\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}