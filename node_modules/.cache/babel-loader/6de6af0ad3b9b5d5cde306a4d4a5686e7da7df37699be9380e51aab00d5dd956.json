{"ast":null,"code":"import React, { useRef } from 'react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { useSize } from 'ahooks';\nimport { rubberbandIfOutOfBounds } from '../../utils/rubberband';\nimport { useDragAndPinch } from '../../utils/use-drag-and-pinch';\nimport { bound } from '../../utils/bound';\nimport * as mat from '../../utils/matrix';\nconst classPrefix = `adm-image-viewer`;\nexport const Slide = props => {\n  const {\n    dragLockRef,\n    maxZoom\n  } = props;\n  const controlRef = useRef(null);\n  const imgRef = useRef(null);\n  const [{\n    matrix\n  }, api] = useSpring(() => ({\n    matrix: mat.create(),\n    config: {\n      tension: 200\n    }\n  }));\n  const controlSize = useSize(controlRef);\n  const imgSize = useSize(imgRef);\n  const pinchLockRef = useRef(false);\n  const boundMatrix = function (nextMatrix, type) {\n    let last = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!controlSize || !imgSize) return nextMatrix;\n    const controlLeft = -controlSize.width / 2;\n    const controlTop = -controlSize.height / 2;\n    const imgLeft = -imgSize.width / 2;\n    const imgTop = -imgSize.height / 2;\n    const zoom = mat.getScaleX(nextMatrix);\n    const scaledImgWidth = zoom * imgSize.width;\n    const scaledImgHeight = zoom * imgSize.height;\n    const [x, y] = mat.apply(nextMatrix, [imgLeft, imgTop]);\n    if (type === 'translate') {\n      let boundedX = x;\n      let boundedY = y;\n      if (scaledImgWidth > controlSize.width) {\n        const minX = controlLeft - (scaledImgWidth - controlSize.width);\n        const maxX = controlLeft;\n        boundedX = last ? bound(x, minX, maxX) : rubberbandIfOutOfBounds(x, minX, maxX, zoom * 50);\n      } else {\n        boundedX = -scaledImgWidth / 2;\n      }\n      if (scaledImgHeight > controlSize.height) {\n        const minY = controlTop - (scaledImgHeight - controlSize.height);\n        const maxY = controlTop;\n        boundedY = last ? bound(y, minY, maxY) : rubberbandIfOutOfBounds(y, minY, maxY, zoom * 50);\n      } else {\n        boundedY = -scaledImgHeight / 2;\n      }\n      return mat.translate(nextMatrix, boundedX - x, boundedY - y);\n    }\n    if (type === 'scale' && last) {\n      const [boundedX, boundedY] = [scaledImgWidth > controlSize.width ? bound(x, controlLeft - (scaledImgWidth - controlSize.width), controlLeft) : -scaledImgWidth / 2, scaledImgHeight > controlSize.height ? bound(y, controlTop - (scaledImgHeight - controlSize.height), controlTop) : -scaledImgHeight / 2];\n      return mat.translate(nextMatrix, boundedX - x, boundedY - y);\n    }\n    return nextMatrix;\n  };\n  useDragAndPinch({\n    onDrag: state => {\n      if (state.first) return;\n      if (state.pinching) return state.cancel();\n      if (state.tap && state.elapsedTime > 0 && state.elapsedTime < 1000) {\n        // 判断点击时间>0是为了过滤掉非正常操作，例如用户长按选择图片之后的取消操作（也是一次点击）\n        props.onTap();\n        return;\n      }\n      const currentZoom = mat.getScaleX(matrix.get());\n      if (dragLockRef) {\n        dragLockRef.current = currentZoom !== 1;\n      }\n      if (!pinchLockRef.current && currentZoom <= 1) {\n        api.start({\n          matrix: mat.create()\n        });\n      } else {\n        const currentMatrix = matrix.get();\n        const offset = [state.offset[0] - mat.getTranslateX(currentMatrix), state.offset[1] - mat.getTranslateY(currentMatrix)];\n        const nextMatrix = mat.translate(currentMatrix, ...(state.last ? [offset[0] + state.velocity[0] * state.direction[0] * 200, offset[1] + state.velocity[1] * state.direction[1] * 200] : offset));\n        api.start({\n          matrix: boundMatrix(nextMatrix, 'translate', state.last),\n          immediate: !state.last\n        });\n      }\n    },\n    onPinch: state => {\n      var _a;\n      pinchLockRef.current = !state.last;\n      const [d] = state.offset;\n      if (d < 0) return;\n      let mergedMaxZoom;\n      if (maxZoom === 'auto') {\n        mergedMaxZoom = controlSize && imgSize ? Math.max(controlSize.height / imgSize.height, controlSize.width / imgSize.width) : 1;\n      } else {\n        mergedMaxZoom = maxZoom;\n      }\n      const nextZoom = state.last ? bound(d, 1, mergedMaxZoom) : d;\n      (_a = props.onZoomChange) === null || _a === void 0 ? void 0 : _a.call(props, nextZoom);\n      if (state.last && nextZoom <= 1) {\n        api.start({\n          matrix: mat.create()\n        });\n        if (dragLockRef) {\n          dragLockRef.current = false;\n        }\n      } else {\n        if (!controlSize) return;\n        const currentMatrix = matrix.get();\n        const currentZoom = mat.getScaleX(currentMatrix);\n        const originOffsetX = state.origin[0] - controlSize.width / 2;\n        const originOffsetY = state.origin[1] - controlSize.height / 2;\n        let nextMatrix = mat.translate(currentMatrix, -originOffsetX, -originOffsetY);\n        nextMatrix = mat.scale(nextMatrix, nextZoom / currentZoom);\n        nextMatrix = mat.translate(nextMatrix, originOffsetX, originOffsetY);\n        api.start({\n          matrix: boundMatrix(nextMatrix, 'scale', state.last),\n          immediate: !state.last\n        });\n        if (dragLockRef) {\n          dragLockRef.current = true;\n        }\n      }\n    }\n  }, {\n    target: controlRef,\n    drag: {\n      // filterTaps: true,\n      from: () => [mat.getTranslateX(matrix.get()), mat.getTranslateY(matrix.get())],\n      pointer: {\n        touch: true\n      }\n    },\n    pinch: {\n      from: () => [mat.getScaleX(matrix.get()), 0],\n      pointer: {\n        touch: true\n      }\n    }\n  });\n  return React.createElement(\"div\", {\n    className: `${classPrefix}-slide`,\n    onPointerMove: e => {\n      if (mat.getScaleX(matrix.get()) !== 1) {\n        e.stopPropagation();\n      }\n    }\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-control`,\n    ref: controlRef\n  }, React.createElement(animated.div, {\n    className: `${classPrefix}-image-wrapper`,\n    style: {\n      matrix\n    }\n  }, React.createElement(\"img\", {\n    ref: imgRef,\n    src: props.image,\n    draggable: false,\n    alt: props.image\n  }))));\n};","map":{"version":3,"names":["React","useRef","useSpring","animated","useSize","rubberbandIfOutOfBounds","useDragAndPinch","bound","mat","classPrefix","Slide","props","dragLockRef","maxZoom","controlRef","imgRef","matrix","api","create","config","tension","controlSize","imgSize","pinchLockRef","boundMatrix","nextMatrix","type","last","arguments","length","undefined","controlLeft","width","controlTop","height","imgLeft","imgTop","zoom","getScaleX","scaledImgWidth","scaledImgHeight","x","y","apply","boundedX","boundedY","minX","maxX","minY","maxY","translate","onDrag","state","first","pinching","cancel","tap","elapsedTime","onTap","currentZoom","get","current","start","currentMatrix","offset","getTranslateX","getTranslateY","velocity","direction","immediate","onPinch","_a","d","mergedMaxZoom","Math","max","nextZoom","onZoomChange","call","originOffsetX","origin","originOffsetY","scale","target","drag","from","pointer","touch","pinch","createElement","className","onPointerMove","e","stopPropagation","ref","div","style","src","image","draggable","alt"],"sources":["/Users/liusu/Desktop/h5_free/game/node_modules/antd-mobile/es/components/image-viewer/slide.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { useSize } from 'ahooks';\nimport { rubberbandIfOutOfBounds } from '../../utils/rubberband';\nimport { useDragAndPinch } from '../../utils/use-drag-and-pinch';\nimport { bound } from '../../utils/bound';\nimport * as mat from '../../utils/matrix';\nconst classPrefix = `adm-image-viewer`;\nexport const Slide = props => {\n  const {\n    dragLockRef,\n    maxZoom\n  } = props;\n  const controlRef = useRef(null);\n  const imgRef = useRef(null);\n  const [{\n    matrix\n  }, api] = useSpring(() => ({\n    matrix: mat.create(),\n    config: {\n      tension: 200\n    }\n  }));\n  const controlSize = useSize(controlRef);\n  const imgSize = useSize(imgRef);\n  const pinchLockRef = useRef(false);\n  const boundMatrix = (nextMatrix, type, last = false) => {\n    if (!controlSize || !imgSize) return nextMatrix;\n    const controlLeft = -controlSize.width / 2;\n    const controlTop = -controlSize.height / 2;\n    const imgLeft = -imgSize.width / 2;\n    const imgTop = -imgSize.height / 2;\n    const zoom = mat.getScaleX(nextMatrix);\n    const scaledImgWidth = zoom * imgSize.width;\n    const scaledImgHeight = zoom * imgSize.height;\n    const [x, y] = mat.apply(nextMatrix, [imgLeft, imgTop]);\n    if (type === 'translate') {\n      let boundedX = x;\n      let boundedY = y;\n      if (scaledImgWidth > controlSize.width) {\n        const minX = controlLeft - (scaledImgWidth - controlSize.width);\n        const maxX = controlLeft;\n        boundedX = last ? bound(x, minX, maxX) : rubberbandIfOutOfBounds(x, minX, maxX, zoom * 50);\n      } else {\n        boundedX = -scaledImgWidth / 2;\n      }\n      if (scaledImgHeight > controlSize.height) {\n        const minY = controlTop - (scaledImgHeight - controlSize.height);\n        const maxY = controlTop;\n        boundedY = last ? bound(y, minY, maxY) : rubberbandIfOutOfBounds(y, minY, maxY, zoom * 50);\n      } else {\n        boundedY = -scaledImgHeight / 2;\n      }\n      return mat.translate(nextMatrix, boundedX - x, boundedY - y);\n    }\n    if (type === 'scale' && last) {\n      const [boundedX, boundedY] = [scaledImgWidth > controlSize.width ? bound(x, controlLeft - (scaledImgWidth - controlSize.width), controlLeft) : -scaledImgWidth / 2, scaledImgHeight > controlSize.height ? bound(y, controlTop - (scaledImgHeight - controlSize.height), controlTop) : -scaledImgHeight / 2];\n      return mat.translate(nextMatrix, boundedX - x, boundedY - y);\n    }\n    return nextMatrix;\n  };\n  useDragAndPinch({\n    onDrag: state => {\n      if (state.first) return;\n      if (state.pinching) return state.cancel();\n      if (state.tap && state.elapsedTime > 0 && state.elapsedTime < 1000) {\n        // 判断点击时间>0是为了过滤掉非正常操作，例如用户长按选择图片之后的取消操作（也是一次点击）\n        props.onTap();\n        return;\n      }\n      const currentZoom = mat.getScaleX(matrix.get());\n      if (dragLockRef) {\n        dragLockRef.current = currentZoom !== 1;\n      }\n      if (!pinchLockRef.current && currentZoom <= 1) {\n        api.start({\n          matrix: mat.create()\n        });\n      } else {\n        const currentMatrix = matrix.get();\n        const offset = [state.offset[0] - mat.getTranslateX(currentMatrix), state.offset[1] - mat.getTranslateY(currentMatrix)];\n        const nextMatrix = mat.translate(currentMatrix, ...(state.last ? [offset[0] + state.velocity[0] * state.direction[0] * 200, offset[1] + state.velocity[1] * state.direction[1] * 200] : offset));\n        api.start({\n          matrix: boundMatrix(nextMatrix, 'translate', state.last),\n          immediate: !state.last\n        });\n      }\n    },\n    onPinch: state => {\n      var _a;\n      pinchLockRef.current = !state.last;\n      const [d] = state.offset;\n      if (d < 0) return;\n      let mergedMaxZoom;\n      if (maxZoom === 'auto') {\n        mergedMaxZoom = controlSize && imgSize ? Math.max(controlSize.height / imgSize.height, controlSize.width / imgSize.width) : 1;\n      } else {\n        mergedMaxZoom = maxZoom;\n      }\n      const nextZoom = state.last ? bound(d, 1, mergedMaxZoom) : d;\n      (_a = props.onZoomChange) === null || _a === void 0 ? void 0 : _a.call(props, nextZoom);\n      if (state.last && nextZoom <= 1) {\n        api.start({\n          matrix: mat.create()\n        });\n        if (dragLockRef) {\n          dragLockRef.current = false;\n        }\n      } else {\n        if (!controlSize) return;\n        const currentMatrix = matrix.get();\n        const currentZoom = mat.getScaleX(currentMatrix);\n        const originOffsetX = state.origin[0] - controlSize.width / 2;\n        const originOffsetY = state.origin[1] - controlSize.height / 2;\n        let nextMatrix = mat.translate(currentMatrix, -originOffsetX, -originOffsetY);\n        nextMatrix = mat.scale(nextMatrix, nextZoom / currentZoom);\n        nextMatrix = mat.translate(nextMatrix, originOffsetX, originOffsetY);\n        api.start({\n          matrix: boundMatrix(nextMatrix, 'scale', state.last),\n          immediate: !state.last\n        });\n        if (dragLockRef) {\n          dragLockRef.current = true;\n        }\n      }\n    }\n  }, {\n    target: controlRef,\n    drag: {\n      // filterTaps: true,\n      from: () => [mat.getTranslateX(matrix.get()), mat.getTranslateY(matrix.get())],\n      pointer: {\n        touch: true\n      }\n    },\n    pinch: {\n      from: () => [mat.getScaleX(matrix.get()), 0],\n      pointer: {\n        touch: true\n      }\n    }\n  });\n  return React.createElement(\"div\", {\n    className: `${classPrefix}-slide`,\n    onPointerMove: e => {\n      if (mat.getScaleX(matrix.get()) !== 1) {\n        e.stopPropagation();\n      }\n    }\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-control`,\n    ref: controlRef\n  }, React.createElement(animated.div, {\n    className: `${classPrefix}-image-wrapper`,\n    style: {\n      matrix\n    }\n  }, React.createElement(\"img\", {\n    ref: imgRef,\n    src: props.image,\n    draggable: false,\n    alt: props.image\n  }))));\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}